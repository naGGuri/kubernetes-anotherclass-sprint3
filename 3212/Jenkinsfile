pipeline {
    agent any

    tools {
        gradle 'gradle-7.6.1'
        jdk 'jdk-17'
    }

    environment {
         // 본인의 DockerHub username로 수정 해주세요.
        		DOCKERHUB_CREDENTIALS_ID = 'docker_password'
                DOCKERHUB_USERNAME = 'gmltn328'
                // 배포용 Github - Sprint3를 Fork 후 Username 변경 해주세요.
                RELEASE_GITHUB_URL = 'https://github.com/naGGuri/kubernetes-anotherclass-sprint3.git'
                // App용 Github - Api-Tester App 소스코드를 Fork 후 Username 변경 해주세요.
                APP_GITHUB_URL = 'https://github.com/naGGuri/kubernetes-anotherclass-api-tester.git'

        APP_VERSION = '3.0.0'
        // 실습 넘버링
        CLASS_NUM = '3212'
    }
    
    stages {
        stage('소스파일 체크아웃') {
            steps {
                git branch: "${APP_VERSION}", url: "${APP_GITHUB_URL}"
            }
        }

        stage('소스 빌드') {
            steps {
                // 755권한 필요 (윈도우에서 Git으로 소스 업로드시 권한은 644)
                sh "chmod +x ./gradlew"
                sh "gradle clean build -x test"
            }
        }

        stage('릴리즈파일 체크아웃') {
            steps {
                checkout scmGit(branches: [[name: '*/main']],
                    extensions: [[$class: 'SparseCheckoutPaths',
                    sparseCheckoutPaths: [[path: "/${CLASS_NUM}"]]]],
					userRemoteConfigs: [[url: "${RELEASE_GITHUB_URL}"]])
            }
        }

        stage('컨테이너 빌드') {
            steps {
                // jar 파일 복사
                sh "cp ./build/libs/app-${APP_VERSION}-SNAPSHOT.jar ./${CLASS_NUM}/build/docker/app-${APP_VERSION}-SNAPSHOT.jar"

                // 도커 빌드
                sh "docker build -t ${DOCKERHUB_USERNAME}/api-tester:${APP_VERSION} ./${CLASS_NUM}/build/docker"
            }
        }

        stage('컨테이너 업로드') {
            steps {
                // DockerHub로 이미지 업로드
                script {
                    // Jenkins Credentials를 환경 변수 DOCKER_USER/DOCKER_PASS로 바인딩
                    withCredentials([usernamePassword(
                        credentialsId: "${DOCKERHUB_CREDENTIALS_ID}",
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS')]) {

                        sh """
                            # 1. 도커 로그인: 비밀번호를 표준 입력으로 안전하게 전달
                            echo "\$DOCKER_PASS" | docker login -u "\$DOCKER_USER" --password-stdin

                            # 2. 이미지 푸시
                            docker push ${DOCKERHUB_USERNAME}/api-tester:${APP_VERSION}
                        """
                    }
                }
            }
        }

        stage('쿠버네티스 배포') {
            steps {
                script {
                    // admin.conf 파일을 등록한 실제 Credentials ID로 변경하세요.
                    withCredentials([file(credentialsId: 'k8s_master_config', variable: 'KUBECONFIG_FILE')]) {

                        sh """
                            # 1. KUBECONFIG 환경 변수를 설정하여 kubectl이 해당 파일 사용을 강제
                            export KUBECONFIG=\$KUBECONFIG_FILE

                            echo "Kubernetes 배포 시작..."

                            # 2. K8S 배포 실행
                            sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/namespace.yaml"
                            sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/configmap.yaml"
                            sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/secret.yaml"
                            sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/service.yaml"
                            sh "kubectl apply -f ./${CLASS_NUM}/deploy/k8s/deployment.yaml"

                            echo "Kubernetes 배포 완료."
                        """
                    }
                }
            }
        }
    }
}